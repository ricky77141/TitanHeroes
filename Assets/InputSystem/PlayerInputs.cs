//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerMove"",
            ""id"": ""2ee5b449-893a-4e52-9f21-3d3543faa95b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""765f7a51-a141-4c5e-9915-512edf654288"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6403f824-41d0-47b7-b1a4-8bea27a68587"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bb1793d9-cd37-4ef5-8548-b7889fe25a8e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7a18eed-ed0c-4e88-a689-3a845c50127b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fc59c267-0ced-49fa-86d2-e25de3a43ed4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""466e0bb1-a25e-4389-9b08-01ce8ed107ad"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1e109d0d-48a4-4030-a2ac-2c7adc1d7001"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Attack"",
            ""id"": ""574fbea3-6bf0-4ec5-b52a-3eb2f76fa230"",
            ""actions"": [
                {
                    ""name"": ""MainAttack"",
                    ""type"": ""Button"",
                    ""id"": ""f8dc0b3d-272b-4d4f-8d43-9b9b7a87a264"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack1"",
                    ""type"": ""Button"",
                    ""id"": ""af904470-0fa9-470c-9fe5-a8a537b6a27b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack2"",
                    ""type"": ""Button"",
                    ""id"": ""75160b4d-4ecc-4f18-911a-65b88bc79e55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack3"",
                    ""type"": ""Button"",
                    ""id"": ""f349c0ea-fd64-4796-ab68-f0cb0c18bf48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d26459fc-0c0d-4c80-a78a-a9cbfffd9c4a"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90e91818-b7f1-4225-a4f3-19fdb862fbcf"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3ac7c05-5706-4b23-a0c4-ebd30e3f7a92"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98b6cb1a-8a5d-4462-993a-eb4586a0484c"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4eace430-3ad0-4bef-b349-f462b9fdb35f"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad6a1e2a-c2ed-455e-bda8-e5582ff5e9fb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12dec1f1-0a8f-4656-bb85-846ef598b5b5"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f5c411e-4d29-4786-a27d-2d48e2870e7d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMove
        m_PlayerMove = asset.FindActionMap("PlayerMove", throwIfNotFound: true);
        m_PlayerMove_Movement = m_PlayerMove.FindAction("Movement", throwIfNotFound: true);
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_MainAttack = m_Attack.FindAction("MainAttack", throwIfNotFound: true);
        m_Attack_SpecialAttack1 = m_Attack.FindAction("SpecialAttack1", throwIfNotFound: true);
        m_Attack_SpecialAttack2 = m_Attack.FindAction("SpecialAttack2", throwIfNotFound: true);
        m_Attack_SpecialAttack3 = m_Attack.FindAction("SpecialAttack3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMove
    private readonly InputActionMap m_PlayerMove;
    private IPlayerMoveActions m_PlayerMoveActionsCallbackInterface;
    private readonly InputAction m_PlayerMove_Movement;
    public struct PlayerMoveActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerMoveActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMove_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMoveActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMoveActions instance)
        {
            if (m_Wrapper.m_PlayerMoveActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerMoveActions @PlayerMove => new PlayerMoveActions(this);

    // Attack
    private readonly InputActionMap m_Attack;
    private IAttackActions m_AttackActionsCallbackInterface;
    private readonly InputAction m_Attack_MainAttack;
    private readonly InputAction m_Attack_SpecialAttack1;
    private readonly InputAction m_Attack_SpecialAttack2;
    private readonly InputAction m_Attack_SpecialAttack3;
    public struct AttackActions
    {
        private @PlayerInputs m_Wrapper;
        public AttackActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainAttack => m_Wrapper.m_Attack_MainAttack;
        public InputAction @SpecialAttack1 => m_Wrapper.m_Attack_SpecialAttack1;
        public InputAction @SpecialAttack2 => m_Wrapper.m_Attack_SpecialAttack2;
        public InputAction @SpecialAttack3 => m_Wrapper.m_Attack_SpecialAttack3;
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        public void SetCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterface != null)
            {
                @MainAttack.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnMainAttack;
                @MainAttack.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnMainAttack;
                @MainAttack.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnMainAttack;
                @SpecialAttack1.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnSpecialAttack1;
                @SpecialAttack1.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnSpecialAttack1;
                @SpecialAttack1.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnSpecialAttack1;
                @SpecialAttack2.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnSpecialAttack2;
                @SpecialAttack2.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnSpecialAttack2;
                @SpecialAttack2.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnSpecialAttack2;
                @SpecialAttack3.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnSpecialAttack3;
                @SpecialAttack3.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnSpecialAttack3;
                @SpecialAttack3.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnSpecialAttack3;
            }
            m_Wrapper.m_AttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MainAttack.started += instance.OnMainAttack;
                @MainAttack.performed += instance.OnMainAttack;
                @MainAttack.canceled += instance.OnMainAttack;
                @SpecialAttack1.started += instance.OnSpecialAttack1;
                @SpecialAttack1.performed += instance.OnSpecialAttack1;
                @SpecialAttack1.canceled += instance.OnSpecialAttack1;
                @SpecialAttack2.started += instance.OnSpecialAttack2;
                @SpecialAttack2.performed += instance.OnSpecialAttack2;
                @SpecialAttack2.canceled += instance.OnSpecialAttack2;
                @SpecialAttack3.started += instance.OnSpecialAttack3;
                @SpecialAttack3.performed += instance.OnSpecialAttack3;
                @SpecialAttack3.canceled += instance.OnSpecialAttack3;
            }
        }
    }
    public AttackActions @Attack => new AttackActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerMoveActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IAttackActions
    {
        void OnMainAttack(InputAction.CallbackContext context);
        void OnSpecialAttack1(InputAction.CallbackContext context);
        void OnSpecialAttack2(InputAction.CallbackContext context);
        void OnSpecialAttack3(InputAction.CallbackContext context);
    }
}
